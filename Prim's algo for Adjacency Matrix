#include <iostream>
#include <vector>
#include <utility>
#include <bits/stdc++.h>
#include <algorithm>
# define v 5
using namespace std;
int minkey(int key[], bool mstset[])
{
    int min1 = INT_MAX, min_index;
    for(int x=0; x<v; x++)
    {
        if(mstset[x] == false && key[x] < min1 )
        {
            min1 = key[x] , min_index =  x;
        }
    }
return min_index;

}
void printMST(int parent[], int graph[v][v])
{
    cout<<"Edge \tWeight\n";
    for (int i = 1; i < v; i++)
        cout<<parent[i]<<" - "<<i<<" \t"<<graph[i][parent[i]]<<" \n";
}

void primMST(int graph[v][v])
{
    int parent[v];
    int key[v];
    bool mstset[v];
    for (int i = 0; i < v; i++)
        key[i] = INT_MAX, mstset[i] = false;

    key[0]= 0;
    parent[0] = -1;
    for(int x=0; x<v-1; x++)
    {
        int u = minkey(key, mstset);
        mstset[u] = true;
        for(int y=0; y<v; y++)
        {
            if(graph[x][y] !=0 && mstset[y] == false && graph[x][y]<key[y])
            {
                key[y] = graph[x][y];
                parent[y] = u;
            }
        }
    }
    printMST(parent, graph);

}







int main()
{
    int graph[v][v] = { { 0, 2, 0, 6, 0 },
                        { 2, 0, 3, 8, 5 },
                        { 0, 3, 0, 0, 7 },
                        { 6, 8, 0, 0, 9 },
                        { 0, 5, 7, 9, 0 } };

    // Print the solution
    primMST(graph);

    return 0;
}
